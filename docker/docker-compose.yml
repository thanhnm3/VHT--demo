version: '2'
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.2
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: ['CMD', 'bash', '-c', "echo 'ruok' | nc localhost 2181"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - confluent
      # docker exec -it broker /opt/kafka/bin/kafka-topics.sh --describe --topic person-topic --bootstrap-server localhost:9092

  broker:
    image: confluentinc/cp-server:7.3.2
    hostname: broker
    container_name: broker
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_HEAP_OPTS: "-Xmx1G -Xms1G"
      KAFKA_LOG_RETENTION_HOURS: "48"
      KAFKA_LOG_SEGMENT_BYTES: "1073741824"
      KAFKA_NUM_NETWORK_THREADS: "3"
      KAFKA_NUM_IO_THREADS: "8"
      KAFKA_SOCKET_SEND_BUFFER_BYTES: "1048576"
      KAFKA_SOCKET_RECEIVE_BUFFER_BYTES: "1048576"
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: broker:29092
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: 'true'
      CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'
      CONFLUENT_MONITORING_INTERCEPTOR_BOOTSTRAP_SERVERS: broker:29092
      CONFLUENT_MONITORING_INTERCEPTOR_TOPIC_REPLICATION: 1
    networks:
      - confluent
    healthcheck:
      test: [ "CMD", "bash", "-c", 'nc -z localhost 9092' ]
      interval: 10s
      timeout: 5s
      retries: 5


  broker2:
    image: confluentinc/cp-server:7.3.2
    hostname: broker2
    container_name: broker2
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9093:9093"
      - "9102:9102"
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker2:29093,PLAINTEXT_HOST://localhost:9093
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      KAFKA_JMX_PORT: 9102
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_HEAP_OPTS: "-Xmx1G -Xms1G"
      KAFKA_LOG_RETENTION_HOURS: "48"
      KAFKA_LOG_SEGMENT_BYTES: "1073741824"
      KAFKA_NUM_NETWORK_THREADS: "3"
      KAFKA_NUM_IO_THREADS: "8"
      KAFKA_SOCKET_SEND_BUFFER_BYTES: "1048576"
      KAFKA_SOCKET_RECEIVE_BUFFER_BYTES: "1048576"
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: broker2:29093
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: 'true'
      CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'
      CONFLUENT_MONITORING_INTERCEPTOR_BOOTSTRAP_SERVERS: broker2:29093
      CONFLUENT_MONITORING_INTERCEPTOR_TOPIC_REPLICATION: 1
    networks:
      - confluent
    healthcheck:
      test: [ "CMD", "bash", "-c", 'nc -z localhost 9093' ]
      interval: 10s
      timeout: 5s
      retries: 5

  broker3:
    image: confluentinc/cp-server:7.3.2
    hostname: broker3
    container_name: broker3
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9094:9094"
      - "9103:9103"
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker3:29094,PLAINTEXT_HOST://localhost:9094
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      KAFKA_JMX_PORT: 9103
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_HEAP_OPTS: "-Xmx1G -Xms1G"
      KAFKA_LOG_RETENTION_HOURS: "48"
      KAFKA_LOG_SEGMENT_BYTES: "1073741824"
      KAFKA_NUM_NETWORK_THREADS: "3"
      KAFKA_NUM_IO_THREADS: "8"
      KAFKA_SOCKET_SEND_BUFFER_BYTES: "1048576"
      KAFKA_SOCKET_RECEIVE_BUFFER_BYTES: "1048576"
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: broker3:29094
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: 'true'
      CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'
      CONFLUENT_MONITORING_INTERCEPTOR_BOOTSTRAP_SERVERS: broker3:29094
      CONFLUENT_MONITORING_INTERCEPTOR_TOPIC_REPLICATION: 1
    networks:
      - confluent
    healthcheck:
      test: [ "CMD", "bash", "-c", 'nc -z localhost 9094' ]
      interval: 10s
      timeout: 5s
      retries: 5

  control-center:
    image: confluentinc/cp-enterprise-control-center:7.3.2
    hostname: control-center
    container_name: control-center
    depends_on:
      broker:
        condition: service_healthy
    ports:
      - "9021:9021"
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: 'broker:29092,broker2:29093,broker3:29094'
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 3
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 3
      CONFLUENT_METRICS_TOPIC_REPLICATION: 3
      CONFLUENT_METRICS_ENABLE: 'true'
      CONTROL_CENTER_MONITORING_INTERCEPTOR_BOOTSTRAP_SERVERS: 'broker:29092'
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_REPLICATION: 1
      CONTROL_CENTER_METRICS_SAMPLING_INTERVAL_MS: 1000
      PORT: 9021
    networks:
      - confluent
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9021/health" ]
      interval: 30s
      timeout: 10s
      retries: 5

#================================================================================================
  aerospike:
    image: aerospike/aerospike-server:latest
    container_name: aerospike
    ports:
      - "3000:3000"
    volumes:
      - ./aerospike.conf:/etc/aerospike/aerospike.conf
      - ./aerospike_data:/opt/aerospike/data  # Gắn thư mục dữ liệu vào container
    command: ["--config-file", "/etc/aerospike/aerospike.conf"]
    networks:
      - confluent

  aerospike2:
    image: aerospike/aerospike-server:latest
    container_name: aerospike2
    ports:
      - "4000:3000"
    volumes:
      - ./aerospike2.conf:/etc/aerospike/aerospike.conf
      - ./aerospike_data:/opt/aerospike/data 
    command: ["--config-file", "/etc/aerospike/aerospike.conf"]
    networks:
      - confluent

    # Copyfile aerospike.conf vao container
    # docker cp aerospike.conf aerospike:/etc/aerospike/aerospike.conf
    # docker restart aerospike
#================================================================================================

  aerospike-tools:
    image: aerospike/aerospike-tools:latest
    container_name: aerospike-tools
    depends_on:
      - aerospike
    networks:
      - confluent
    entrypoint: [ "sleep", "infinity" ]
  # docker exec -it aerospike-tools aql -h aerospike
  # Để truy cập vào aql của DB, để kiểm thử


networks:
  confluent:
    driver: bridge


# =================================================================================================
 # Test toc do truy cap vao broker

      # Tao test topic
      # docker exec -it broker kafka-topics --create --topic demo-topic --bootstrap-server localhost:9092 --partitions 1 --replication-factor 1


      # Tao producer
      # docker exec -it broker kafka-producer-perf-test --topic demo-topic --num-records 5000000 --record-size 100 --throughput -1 --producer-props bootstrap.servers=localhost:9092 batch.size=65536 linger.ms=5

      # docker exec -it broker kafka-producer-perf-test --topic demo-topic --num-records 500000 --record-size 1000 --throughput -1 --producer-props bootstrap.servers=localhost:9092
      # docker exec -it broker kafka-producer-perf-test --topic demo-topic --num-records 500000 --record-size 10000 --throughput -1 --producer-props bootstrap.servers=localhost:9092

      # Tao consumer
      # docker exec -it broker kafka-consumer-perf-test --bootstrap-server broker:29092 --messages 5000 --reporting-interval 1000 --topic demo-topic --show-detailed-stats --from-latest false
      # Toc do tot nhat la 700Mb/s

      # Tham khao https://developer.confluent.io/learn/kafka-performance/


# Voi nhieu broker 
# =================================================================================================
# Tao demo-topic
# docker exec -it broker kafka-topics --create --partitions 6 --replication-factor 3 --topic demo-topic --bootstrap-server broker:29092

# Tao producer cho demo-topic
# docker exec -it broker kafka-producer-perf-test --throughput 500 --num-records 100000000 --topic demo-topic --record-size 100 --producer-props bootstrap.servers=broker:29092

# Tao consumer cho demo-topic
# docker exec -it broker kafka-consumer-perf-test --messages 100000000 --timeout 1000000 --topic demo-topic --reporting-interval 1000 bootstrap-server=broker:29092,broker2:29093,broker3:29094